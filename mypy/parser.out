Grammar:

Rule 0     S' -> statement
Rule 1     statement -> expr
Rule 2     statement -> variable
Rule 3     statement -> NOM ( variable )
Rule 4     statement -> NOM ( )
Rule 5     statement -> OCCUR URL CHAINE
Rule 6     statement -> FONC NOM ( NOM ) : statement
Rule 7     statement -> FONC NOM ( ) : statement
Rule 8     statement -> TANTQUE condition ALORS statement
Rule 9     statement -> SI condition ALORS statement SINON statement
Rule 10    statement -> POUR variable FLECHE expr ALORS statement
Rule 11    statement -> QUIT  [precedence=nonassoc, level=2]
Rule 12    statement -> <empty>
Rule 13    condition -> expr < expr  [precedence=nonassoc, level=1]
Rule 14    condition -> expr > expr  [precedence=nonassoc, level=1]
Rule 15    condition -> expr NE expr  [precedence=nonassoc, level=1]
Rule 16    condition -> expr GE expr  [precedence=nonassoc, level=1]
Rule 17    condition -> expr PE expr  [precedence=nonassoc, level=1]
Rule 18    condition -> expr EGL expr  [precedence=nonassoc, level=1]
Rule 19    variable -> NOM = expr
Rule 20    expr -> ( expr )
Rule 21    expr -> FLOAT
Rule 22    expr -> NUM
Rule 23    expr -> NOM
Rule 24    expr -> CONCA CHAINE CHAINE
Rule 25    expr -> ECRIS expr  [precedence=nonassoc, level=2]
Rule 26    expr -> - expr  [precedence=right, level=6]
Rule 27    expr -> expr % expr  [precedence=left, level=4]
Rule 28    expr -> expr ^ expr  [precedence=right, level=5]
Rule 29    expr -> expr / expr  [precedence=left, level=4]
Rule 30    expr -> expr * expr  [precedence=left, level=4]
Rule 31    expr -> expr x expr  [precedence=left, level=4]
Rule 32    expr -> expr - expr  [precedence=left, level=3]
Rule 33    expr -> expr + expr  [precedence=left, level=3]
Rule 34    expr -> CHAINE
Rule 35    expr -> TYPE expr  [precedence=left, level=3]
Rule 36    expr -> DOUBLE expr  [precedence=nonassoc, level=2]

Terminals, with rules where they appear:

%                    : 27
(                    : 3 4 6 7 20
)                    : 3 4 6 7 20
*                    : 30
+                    : 33
-                    : 26 32
/                    : 29
:                    : 6 7
<                    : 13
=                    : 19
>                    : 14
ALORS                : 8 9 10
CHAINE               : 5 24 24 34
CONCA                : 24
DOUBLE               : 36
ECRIS                : 25
EGL                  : 18
FLECHE               : 10
FLOAT                : 21
FONC                 : 6 7
GE                   : 16
NE                   : 15
NOM                  : 3 4 6 6 7 19 23
NUM                  : 22
OCCUR                : 5
PE                   : 17
POUR                 : 10
QUIT                 : 11
SI                   : 9
SINON                : 9
TANTQUE              : 8
TYPE                 : 35
URL                  : 5
^                    : 28
error                : 
x                    : 31

Nonterminals, with rules where they appear:

condition            : 8 9
expr                 : 1 10 13 13 14 14 15 15 16 16 17 17 18 18 19 20 25 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 35 36
statement            : 6 7 8 9 9 10 0
variable             : 2 3 10


state 0

    (0) S' -> . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . QUIT
    (12) statement -> .
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (19) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    QUIT            shift and go to state 12
    $end            reduce using rule 12 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    statement                      shift and go to state 1
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 1

    (0) S' -> statement .


state 2

    (1) statement -> expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    $end            reduce using rule 1 (statement -> expr .)
    SINON           reduce using rule 1 (statement -> expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 3

    (2) statement -> variable .
    $end            reduce using rule 2 (statement -> variable .)
    SINON           reduce using rule 2 (statement -> variable .)


state 4

    (3) statement -> NOM . ( variable )
    (4) statement -> NOM . ( )
    (23) expr -> NOM .
    (19) variable -> NOM . = expr
    (               shift and go to state 27
    %               reduce using rule 23 (expr -> NOM .)
    ^               reduce using rule 23 (expr -> NOM .)
    /               reduce using rule 23 (expr -> NOM .)
    *               reduce using rule 23 (expr -> NOM .)
    x               reduce using rule 23 (expr -> NOM .)
    -               reduce using rule 23 (expr -> NOM .)
    +               reduce using rule 23 (expr -> NOM .)
    $end            reduce using rule 23 (expr -> NOM .)
    SINON           reduce using rule 23 (expr -> NOM .)
    =               shift and go to state 28


state 5

    (20) expr -> ( . expr )
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 29

state 6

    (5) statement -> OCCUR . URL CHAINE
    URL             shift and go to state 31


state 7

    (34) expr -> CHAINE .
    %               reduce using rule 34 (expr -> CHAINE .)
    ^               reduce using rule 34 (expr -> CHAINE .)
    /               reduce using rule 34 (expr -> CHAINE .)
    *               reduce using rule 34 (expr -> CHAINE .)
    x               reduce using rule 34 (expr -> CHAINE .)
    -               reduce using rule 34 (expr -> CHAINE .)
    +               reduce using rule 34 (expr -> CHAINE .)
    $end            reduce using rule 34 (expr -> CHAINE .)
    )               reduce using rule 34 (expr -> CHAINE .)
    <               reduce using rule 34 (expr -> CHAINE .)
    >               reduce using rule 34 (expr -> CHAINE .)
    NE              reduce using rule 34 (expr -> CHAINE .)
    GE              reduce using rule 34 (expr -> CHAINE .)
    PE              reduce using rule 34 (expr -> CHAINE .)
    EGL             reduce using rule 34 (expr -> CHAINE .)
    FLECHE          reduce using rule 34 (expr -> CHAINE .)
    SINON           reduce using rule 34 (expr -> CHAINE .)
    ALORS           reduce using rule 34 (expr -> CHAINE .)


state 8

    (6) statement -> FONC . NOM ( NOM ) : statement
    (7) statement -> FONC . NOM ( ) : statement
    NOM             shift and go to state 32


state 9

    (8) statement -> TANTQUE . condition ALORS statement
    (13) condition -> . expr < expr
    (14) condition -> . expr > expr
    (15) condition -> . expr NE expr
    (16) condition -> . expr GE expr
    (17) condition -> . expr PE expr
    (18) condition -> . expr EGL expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    condition                      shift and go to state 33
    expr                           shift and go to state 34

state 10

    (9) statement -> SI . condition ALORS statement SINON statement
    (13) condition -> . expr < expr
    (14) condition -> . expr > expr
    (15) condition -> . expr NE expr
    (16) condition -> . expr GE expr
    (17) condition -> . expr PE expr
    (18) condition -> . expr EGL expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    condition                      shift and go to state 35
    expr                           shift and go to state 34

state 11

    (10) statement -> POUR . variable FLECHE expr ALORS statement
    (19) variable -> . NOM = expr
    NOM             shift and go to state 37

    variable                       shift and go to state 36

state 12

    (11) statement -> QUIT .
    $end            reduce using rule 11 (statement -> QUIT .)
    SINON           reduce using rule 11 (statement -> QUIT .)


state 13

    (21) expr -> FLOAT .
    %               reduce using rule 21 (expr -> FLOAT .)
    ^               reduce using rule 21 (expr -> FLOAT .)
    /               reduce using rule 21 (expr -> FLOAT .)
    *               reduce using rule 21 (expr -> FLOAT .)
    x               reduce using rule 21 (expr -> FLOAT .)
    -               reduce using rule 21 (expr -> FLOAT .)
    +               reduce using rule 21 (expr -> FLOAT .)
    $end            reduce using rule 21 (expr -> FLOAT .)
    )               reduce using rule 21 (expr -> FLOAT .)
    <               reduce using rule 21 (expr -> FLOAT .)
    >               reduce using rule 21 (expr -> FLOAT .)
    NE              reduce using rule 21 (expr -> FLOAT .)
    GE              reduce using rule 21 (expr -> FLOAT .)
    PE              reduce using rule 21 (expr -> FLOAT .)
    EGL             reduce using rule 21 (expr -> FLOAT .)
    FLECHE          reduce using rule 21 (expr -> FLOAT .)
    SINON           reduce using rule 21 (expr -> FLOAT .)
    ALORS           reduce using rule 21 (expr -> FLOAT .)


state 14

    (22) expr -> NUM .
    %               reduce using rule 22 (expr -> NUM .)
    ^               reduce using rule 22 (expr -> NUM .)
    /               reduce using rule 22 (expr -> NUM .)
    *               reduce using rule 22 (expr -> NUM .)
    x               reduce using rule 22 (expr -> NUM .)
    -               reduce using rule 22 (expr -> NUM .)
    +               reduce using rule 22 (expr -> NUM .)
    $end            reduce using rule 22 (expr -> NUM .)
    )               reduce using rule 22 (expr -> NUM .)
    <               reduce using rule 22 (expr -> NUM .)
    >               reduce using rule 22 (expr -> NUM .)
    NE              reduce using rule 22 (expr -> NUM .)
    GE              reduce using rule 22 (expr -> NUM .)
    PE              reduce using rule 22 (expr -> NUM .)
    EGL             reduce using rule 22 (expr -> NUM .)
    FLECHE          reduce using rule 22 (expr -> NUM .)
    SINON           reduce using rule 22 (expr -> NUM .)
    ALORS           reduce using rule 22 (expr -> NUM .)


state 15

    (24) expr -> CONCA . CHAINE CHAINE
    CHAINE          shift and go to state 38


state 16

    (25) expr -> ECRIS . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 39

state 17

    (26) expr -> - . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 40

state 18

    (35) expr -> TYPE . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 41

state 19

    (36) expr -> DOUBLE . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 42

state 20

    (27) expr -> expr % . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 43

state 21

    (28) expr -> expr ^ . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 44

state 22

    (29) expr -> expr / . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 45

state 23

    (30) expr -> expr * . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 46

state 24

    (31) expr -> expr x . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 47

state 25

    (32) expr -> expr - . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 48

state 26

    (33) expr -> expr + . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 49

state 27

    (3) statement -> NOM ( . variable )
    (4) statement -> NOM ( . )
    (19) variable -> . NOM = expr
    )               shift and go to state 51
    NOM             shift and go to state 37

    variable                       shift and go to state 50

state 28

    (19) variable -> NOM = . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 52

state 29

    (20) expr -> ( expr . )
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 53
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 30

    (23) expr -> NOM .
    )               reduce using rule 23 (expr -> NOM .)
    %               reduce using rule 23 (expr -> NOM .)
    ^               reduce using rule 23 (expr -> NOM .)
    /               reduce using rule 23 (expr -> NOM .)
    *               reduce using rule 23 (expr -> NOM .)
    x               reduce using rule 23 (expr -> NOM .)
    -               reduce using rule 23 (expr -> NOM .)
    +               reduce using rule 23 (expr -> NOM .)
    <               reduce using rule 23 (expr -> NOM .)
    >               reduce using rule 23 (expr -> NOM .)
    NE              reduce using rule 23 (expr -> NOM .)
    GE              reduce using rule 23 (expr -> NOM .)
    PE              reduce using rule 23 (expr -> NOM .)
    EGL             reduce using rule 23 (expr -> NOM .)
    $end            reduce using rule 23 (expr -> NOM .)
    FLECHE          reduce using rule 23 (expr -> NOM .)
    SINON           reduce using rule 23 (expr -> NOM .)
    ALORS           reduce using rule 23 (expr -> NOM .)


state 31

    (5) statement -> OCCUR URL . CHAINE
    CHAINE          shift and go to state 54


state 32

    (6) statement -> FONC NOM . ( NOM ) : statement
    (7) statement -> FONC NOM . ( ) : statement
    (               shift and go to state 55


state 33

    (8) statement -> TANTQUE condition . ALORS statement
    ALORS           shift and go to state 56


state 34

    (13) condition -> expr . < expr
    (14) condition -> expr . > expr
    (15) condition -> expr . NE expr
    (16) condition -> expr . GE expr
    (17) condition -> expr . PE expr
    (18) condition -> expr . EGL expr
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    <               shift and go to state 57
    >               shift and go to state 58
    NE              shift and go to state 59
    GE              shift and go to state 60
    PE              shift and go to state 61
    EGL             shift and go to state 62
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 35

    (9) statement -> SI condition . ALORS statement SINON statement
    ALORS           shift and go to state 63


state 36

    (10) statement -> POUR variable . FLECHE expr ALORS statement
    FLECHE          shift and go to state 64


state 37

    (19) variable -> NOM . = expr
    =               shift and go to state 28


state 38

    (24) expr -> CONCA CHAINE . CHAINE
    CHAINE          shift and go to state 65


state 39

    (25) expr -> ECRIS expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    $end            reduce using rule 25 (expr -> ECRIS expr .)
    )               reduce using rule 25 (expr -> ECRIS expr .)
    <               reduce using rule 25 (expr -> ECRIS expr .)
    >               reduce using rule 25 (expr -> ECRIS expr .)
    NE              reduce using rule 25 (expr -> ECRIS expr .)
    GE              reduce using rule 25 (expr -> ECRIS expr .)
    PE              reduce using rule 25 (expr -> ECRIS expr .)
    EGL             reduce using rule 25 (expr -> ECRIS expr .)
    FLECHE          reduce using rule 25 (expr -> ECRIS expr .)
    SINON           reduce using rule 25 (expr -> ECRIS expr .)
    ALORS           reduce using rule 25 (expr -> ECRIS expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 40

    (26) expr -> - expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    %               reduce using rule 26 (expr -> - expr .)
    ^               reduce using rule 26 (expr -> - expr .)
    /               reduce using rule 26 (expr -> - expr .)
    *               reduce using rule 26 (expr -> - expr .)
    x               reduce using rule 26 (expr -> - expr .)
    -               reduce using rule 26 (expr -> - expr .)
    +               reduce using rule 26 (expr -> - expr .)
    $end            reduce using rule 26 (expr -> - expr .)
    )               reduce using rule 26 (expr -> - expr .)
    <               reduce using rule 26 (expr -> - expr .)
    >               reduce using rule 26 (expr -> - expr .)
    NE              reduce using rule 26 (expr -> - expr .)
    GE              reduce using rule 26 (expr -> - expr .)
    PE              reduce using rule 26 (expr -> - expr .)
    EGL             reduce using rule 26 (expr -> - expr .)
    FLECHE          reduce using rule 26 (expr -> - expr .)
    SINON           reduce using rule 26 (expr -> - expr .)
    ALORS           reduce using rule 26 (expr -> - expr .)


state 41

    (35) expr -> TYPE expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    -               reduce using rule 35 (expr -> TYPE expr .)
    +               reduce using rule 35 (expr -> TYPE expr .)
    $end            reduce using rule 35 (expr -> TYPE expr .)
    )               reduce using rule 35 (expr -> TYPE expr .)
    <               reduce using rule 35 (expr -> TYPE expr .)
    >               reduce using rule 35 (expr -> TYPE expr .)
    NE              reduce using rule 35 (expr -> TYPE expr .)
    GE              reduce using rule 35 (expr -> TYPE expr .)
    PE              reduce using rule 35 (expr -> TYPE expr .)
    EGL             reduce using rule 35 (expr -> TYPE expr .)
    FLECHE          reduce using rule 35 (expr -> TYPE expr .)
    SINON           reduce using rule 35 (expr -> TYPE expr .)
    ALORS           reduce using rule 35 (expr -> TYPE expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24


state 42

    (36) expr -> DOUBLE expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    $end            reduce using rule 36 (expr -> DOUBLE expr .)
    )               reduce using rule 36 (expr -> DOUBLE expr .)
    <               reduce using rule 36 (expr -> DOUBLE expr .)
    >               reduce using rule 36 (expr -> DOUBLE expr .)
    NE              reduce using rule 36 (expr -> DOUBLE expr .)
    GE              reduce using rule 36 (expr -> DOUBLE expr .)
    PE              reduce using rule 36 (expr -> DOUBLE expr .)
    EGL             reduce using rule 36 (expr -> DOUBLE expr .)
    FLECHE          reduce using rule 36 (expr -> DOUBLE expr .)
    SINON           reduce using rule 36 (expr -> DOUBLE expr .)
    ALORS           reduce using rule 36 (expr -> DOUBLE expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 43

    (27) expr -> expr % expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    %               reduce using rule 27 (expr -> expr % expr .)
    /               reduce using rule 27 (expr -> expr % expr .)
    *               reduce using rule 27 (expr -> expr % expr .)
    x               reduce using rule 27 (expr -> expr % expr .)
    -               reduce using rule 27 (expr -> expr % expr .)
    +               reduce using rule 27 (expr -> expr % expr .)
    $end            reduce using rule 27 (expr -> expr % expr .)
    )               reduce using rule 27 (expr -> expr % expr .)
    <               reduce using rule 27 (expr -> expr % expr .)
    >               reduce using rule 27 (expr -> expr % expr .)
    NE              reduce using rule 27 (expr -> expr % expr .)
    GE              reduce using rule 27 (expr -> expr % expr .)
    PE              reduce using rule 27 (expr -> expr % expr .)
    EGL             reduce using rule 27 (expr -> expr % expr .)
    FLECHE          reduce using rule 27 (expr -> expr % expr .)
    SINON           reduce using rule 27 (expr -> expr % expr .)
    ALORS           reduce using rule 27 (expr -> expr % expr .)
    ^               shift and go to state 21


state 44

    (28) expr -> expr ^ expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    %               reduce using rule 28 (expr -> expr ^ expr .)
    /               reduce using rule 28 (expr -> expr ^ expr .)
    *               reduce using rule 28 (expr -> expr ^ expr .)
    x               reduce using rule 28 (expr -> expr ^ expr .)
    -               reduce using rule 28 (expr -> expr ^ expr .)
    +               reduce using rule 28 (expr -> expr ^ expr .)
    $end            reduce using rule 28 (expr -> expr ^ expr .)
    )               reduce using rule 28 (expr -> expr ^ expr .)
    <               reduce using rule 28 (expr -> expr ^ expr .)
    >               reduce using rule 28 (expr -> expr ^ expr .)
    NE              reduce using rule 28 (expr -> expr ^ expr .)
    GE              reduce using rule 28 (expr -> expr ^ expr .)
    PE              reduce using rule 28 (expr -> expr ^ expr .)
    EGL             reduce using rule 28 (expr -> expr ^ expr .)
    FLECHE          reduce using rule 28 (expr -> expr ^ expr .)
    SINON           reduce using rule 28 (expr -> expr ^ expr .)
    ALORS           reduce using rule 28 (expr -> expr ^ expr .)
    ^               shift and go to state 21


state 45

    (29) expr -> expr / expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    %               reduce using rule 29 (expr -> expr / expr .)
    /               reduce using rule 29 (expr -> expr / expr .)
    *               reduce using rule 29 (expr -> expr / expr .)
    x               reduce using rule 29 (expr -> expr / expr .)
    -               reduce using rule 29 (expr -> expr / expr .)
    +               reduce using rule 29 (expr -> expr / expr .)
    $end            reduce using rule 29 (expr -> expr / expr .)
    )               reduce using rule 29 (expr -> expr / expr .)
    <               reduce using rule 29 (expr -> expr / expr .)
    >               reduce using rule 29 (expr -> expr / expr .)
    NE              reduce using rule 29 (expr -> expr / expr .)
    GE              reduce using rule 29 (expr -> expr / expr .)
    PE              reduce using rule 29 (expr -> expr / expr .)
    EGL             reduce using rule 29 (expr -> expr / expr .)
    FLECHE          reduce using rule 29 (expr -> expr / expr .)
    SINON           reduce using rule 29 (expr -> expr / expr .)
    ALORS           reduce using rule 29 (expr -> expr / expr .)
    ^               shift and go to state 21


state 46

    (30) expr -> expr * expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    %               reduce using rule 30 (expr -> expr * expr .)
    /               reduce using rule 30 (expr -> expr * expr .)
    *               reduce using rule 30 (expr -> expr * expr .)
    x               reduce using rule 30 (expr -> expr * expr .)
    -               reduce using rule 30 (expr -> expr * expr .)
    +               reduce using rule 30 (expr -> expr * expr .)
    $end            reduce using rule 30 (expr -> expr * expr .)
    )               reduce using rule 30 (expr -> expr * expr .)
    <               reduce using rule 30 (expr -> expr * expr .)
    >               reduce using rule 30 (expr -> expr * expr .)
    NE              reduce using rule 30 (expr -> expr * expr .)
    GE              reduce using rule 30 (expr -> expr * expr .)
    PE              reduce using rule 30 (expr -> expr * expr .)
    EGL             reduce using rule 30 (expr -> expr * expr .)
    FLECHE          reduce using rule 30 (expr -> expr * expr .)
    SINON           reduce using rule 30 (expr -> expr * expr .)
    ALORS           reduce using rule 30 (expr -> expr * expr .)
    ^               shift and go to state 21


state 47

    (31) expr -> expr x expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    %               reduce using rule 31 (expr -> expr x expr .)
    /               reduce using rule 31 (expr -> expr x expr .)
    *               reduce using rule 31 (expr -> expr x expr .)
    x               reduce using rule 31 (expr -> expr x expr .)
    -               reduce using rule 31 (expr -> expr x expr .)
    +               reduce using rule 31 (expr -> expr x expr .)
    $end            reduce using rule 31 (expr -> expr x expr .)
    )               reduce using rule 31 (expr -> expr x expr .)
    <               reduce using rule 31 (expr -> expr x expr .)
    >               reduce using rule 31 (expr -> expr x expr .)
    NE              reduce using rule 31 (expr -> expr x expr .)
    GE              reduce using rule 31 (expr -> expr x expr .)
    PE              reduce using rule 31 (expr -> expr x expr .)
    EGL             reduce using rule 31 (expr -> expr x expr .)
    FLECHE          reduce using rule 31 (expr -> expr x expr .)
    SINON           reduce using rule 31 (expr -> expr x expr .)
    ALORS           reduce using rule 31 (expr -> expr x expr .)
    ^               shift and go to state 21


state 48

    (32) expr -> expr - expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    -               reduce using rule 32 (expr -> expr - expr .)
    +               reduce using rule 32 (expr -> expr - expr .)
    $end            reduce using rule 32 (expr -> expr - expr .)
    )               reduce using rule 32 (expr -> expr - expr .)
    <               reduce using rule 32 (expr -> expr - expr .)
    >               reduce using rule 32 (expr -> expr - expr .)
    NE              reduce using rule 32 (expr -> expr - expr .)
    GE              reduce using rule 32 (expr -> expr - expr .)
    PE              reduce using rule 32 (expr -> expr - expr .)
    EGL             reduce using rule 32 (expr -> expr - expr .)
    FLECHE          reduce using rule 32 (expr -> expr - expr .)
    SINON           reduce using rule 32 (expr -> expr - expr .)
    ALORS           reduce using rule 32 (expr -> expr - expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24


state 49

    (33) expr -> expr + expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    -               reduce using rule 33 (expr -> expr + expr .)
    +               reduce using rule 33 (expr -> expr + expr .)
    $end            reduce using rule 33 (expr -> expr + expr .)
    )               reduce using rule 33 (expr -> expr + expr .)
    <               reduce using rule 33 (expr -> expr + expr .)
    >               reduce using rule 33 (expr -> expr + expr .)
    NE              reduce using rule 33 (expr -> expr + expr .)
    GE              reduce using rule 33 (expr -> expr + expr .)
    PE              reduce using rule 33 (expr -> expr + expr .)
    EGL             reduce using rule 33 (expr -> expr + expr .)
    FLECHE          reduce using rule 33 (expr -> expr + expr .)
    SINON           reduce using rule 33 (expr -> expr + expr .)
    ALORS           reduce using rule 33 (expr -> expr + expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24


state 50

    (3) statement -> NOM ( variable . )
    )               shift and go to state 66


state 51

    (4) statement -> NOM ( ) .
    $end            reduce using rule 4 (statement -> NOM ( ) .)
    SINON           reduce using rule 4 (statement -> NOM ( ) .)


state 52

    (19) variable -> NOM = expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    $end            reduce using rule 19 (variable -> NOM = expr .)
    FLECHE          reduce using rule 19 (variable -> NOM = expr .)
    )               reduce using rule 19 (variable -> NOM = expr .)
    SINON           reduce using rule 19 (variable -> NOM = expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 53

    (20) expr -> ( expr ) .
    %               reduce using rule 20 (expr -> ( expr ) .)
    ^               reduce using rule 20 (expr -> ( expr ) .)
    /               reduce using rule 20 (expr -> ( expr ) .)
    *               reduce using rule 20 (expr -> ( expr ) .)
    x               reduce using rule 20 (expr -> ( expr ) .)
    -               reduce using rule 20 (expr -> ( expr ) .)
    +               reduce using rule 20 (expr -> ( expr ) .)
    $end            reduce using rule 20 (expr -> ( expr ) .)
    )               reduce using rule 20 (expr -> ( expr ) .)
    <               reduce using rule 20 (expr -> ( expr ) .)
    >               reduce using rule 20 (expr -> ( expr ) .)
    NE              reduce using rule 20 (expr -> ( expr ) .)
    GE              reduce using rule 20 (expr -> ( expr ) .)
    PE              reduce using rule 20 (expr -> ( expr ) .)
    EGL             reduce using rule 20 (expr -> ( expr ) .)
    FLECHE          reduce using rule 20 (expr -> ( expr ) .)
    SINON           reduce using rule 20 (expr -> ( expr ) .)
    ALORS           reduce using rule 20 (expr -> ( expr ) .)


state 54

    (5) statement -> OCCUR URL CHAINE .
    $end            reduce using rule 5 (statement -> OCCUR URL CHAINE .)
    SINON           reduce using rule 5 (statement -> OCCUR URL CHAINE .)


state 55

    (6) statement -> FONC NOM ( . NOM ) : statement
    (7) statement -> FONC NOM ( . ) : statement
    NOM             shift and go to state 67
    )               shift and go to state 68


state 56

    (8) statement -> TANTQUE condition ALORS . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . QUIT
    (12) statement -> .
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (19) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    QUIT            shift and go to state 12
    $end            reduce using rule 12 (statement -> .)
    SINON           reduce using rule 12 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    statement                      shift and go to state 69
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 57

    (13) condition -> expr < . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 70

state 58

    (14) condition -> expr > . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 71

state 59

    (15) condition -> expr NE . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 72

state 60

    (16) condition -> expr GE . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 73

state 61

    (17) condition -> expr PE . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 74

state 62

    (18) condition -> expr EGL . expr
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 75

state 63

    (9) statement -> SI condition ALORS . statement SINON statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . QUIT
    (12) statement -> .
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (19) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    QUIT            shift and go to state 12
    SINON           reduce using rule 12 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    statement                      shift and go to state 76
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 64

    (10) statement -> POUR variable FLECHE . expr ALORS statement
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    NOM             shift and go to state 30
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    expr                           shift and go to state 77

state 65

    (24) expr -> CONCA CHAINE CHAINE .
    %               reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    ^               reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    /               reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    *               reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    x               reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    -               reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    +               reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    $end            reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    )               reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    <               reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    >               reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    NE              reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    GE              reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    PE              reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    EGL             reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    FLECHE          reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    SINON           reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)
    ALORS           reduce using rule 24 (expr -> CONCA CHAINE CHAINE .)


state 66

    (3) statement -> NOM ( variable ) .
    $end            reduce using rule 3 (statement -> NOM ( variable ) .)
    SINON           reduce using rule 3 (statement -> NOM ( variable ) .)


state 67

    (6) statement -> FONC NOM ( NOM . ) : statement
    )               shift and go to state 78


state 68

    (7) statement -> FONC NOM ( ) . : statement
    :               shift and go to state 79


state 69

    (8) statement -> TANTQUE condition ALORS statement .
    $end            reduce using rule 8 (statement -> TANTQUE condition ALORS statement .)
    SINON           reduce using rule 8 (statement -> TANTQUE condition ALORS statement .)


state 70

    (13) condition -> expr < expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ALORS           reduce using rule 13 (condition -> expr < expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 71

    (14) condition -> expr > expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ALORS           reduce using rule 14 (condition -> expr > expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 72

    (15) condition -> expr NE expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ALORS           reduce using rule 15 (condition -> expr NE expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 73

    (16) condition -> expr GE expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ALORS           reduce using rule 16 (condition -> expr GE expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 74

    (17) condition -> expr PE expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ALORS           reduce using rule 17 (condition -> expr PE expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 75

    (18) condition -> expr EGL expr .
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ALORS           reduce using rule 18 (condition -> expr EGL expr .)
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 76

    (9) statement -> SI condition ALORS statement . SINON statement
    SINON           shift and go to state 80


state 77

    (10) statement -> POUR variable FLECHE expr . ALORS statement
    (27) expr -> expr . % expr
    (28) expr -> expr . ^ expr
    (29) expr -> expr . / expr
    (30) expr -> expr . * expr
    (31) expr -> expr . x expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    ALORS           shift and go to state 81
    %               shift and go to state 20
    ^               shift and go to state 21
    /               shift and go to state 22
    *               shift and go to state 23
    x               shift and go to state 24
    -               shift and go to state 25
    +               shift and go to state 26


state 78

    (6) statement -> FONC NOM ( NOM ) . : statement
    :               shift and go to state 82


state 79

    (7) statement -> FONC NOM ( ) : . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . QUIT
    (12) statement -> .
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (19) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    QUIT            shift and go to state 12
    $end            reduce using rule 12 (statement -> .)
    SINON           reduce using rule 12 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    statement                      shift and go to state 83
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 80

    (9) statement -> SI condition ALORS statement SINON . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . QUIT
    (12) statement -> .
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (19) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    QUIT            shift and go to state 12
    $end            reduce using rule 12 (statement -> .)
    SINON           reduce using rule 12 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    statement                      shift and go to state 84
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 81

    (10) statement -> POUR variable FLECHE expr ALORS . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . QUIT
    (12) statement -> .
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (19) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    QUIT            shift and go to state 12
    $end            reduce using rule 12 (statement -> .)
    SINON           reduce using rule 12 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    variable                       shift and go to state 3
    expr                           shift and go to state 2
    statement                      shift and go to state 85

state 82

    (6) statement -> FONC NOM ( NOM ) : . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . QUIT
    (12) statement -> .
    (20) expr -> . ( expr )
    (21) expr -> . FLOAT
    (22) expr -> . NUM
    (23) expr -> . NOM
    (24) expr -> . CONCA CHAINE CHAINE
    (25) expr -> . ECRIS expr
    (26) expr -> . - expr
    (27) expr -> . expr % expr
    (28) expr -> . expr ^ expr
    (29) expr -> . expr / expr
    (30) expr -> . expr * expr
    (31) expr -> . expr x expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . CHAINE
    (35) expr -> . TYPE expr
    (36) expr -> . DOUBLE expr
    (19) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    QUIT            shift and go to state 12
    $end            reduce using rule 12 (statement -> .)
    SINON           reduce using rule 12 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 13
    NUM             shift and go to state 14
    CONCA           shift and go to state 15
    ECRIS           shift and go to state 16
    -               shift and go to state 17
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 18
    DOUBLE          shift and go to state 19

    statement                      shift and go to state 86
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 83

    (7) statement -> FONC NOM ( ) : statement .
    $end            reduce using rule 7 (statement -> FONC NOM ( ) : statement .)
    SINON           reduce using rule 7 (statement -> FONC NOM ( ) : statement .)


state 84

    (9) statement -> SI condition ALORS statement SINON statement .
    $end            reduce using rule 9 (statement -> SI condition ALORS statement SINON statement .)
    SINON           reduce using rule 9 (statement -> SI condition ALORS statement SINON statement .)


state 85

    (10) statement -> POUR variable FLECHE expr ALORS statement .
    $end            reduce using rule 10 (statement -> POUR variable FLECHE expr ALORS statement .)
    SINON           reduce using rule 10 (statement -> POUR variable FLECHE expr ALORS statement .)


state 86

    (6) statement -> FONC NOM ( NOM ) : statement .
    $end            reduce using rule 6 (statement -> FONC NOM ( NOM ) : statement .)
    SINON           reduce using rule 6 (statement -> FONC NOM ( NOM ) : statement .)
