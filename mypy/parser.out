Grammar:

Rule 0     S' -> statement
Rule 1     statement -> expr
Rule 2     statement -> variable
Rule 3     statement -> NOM ( variable )
Rule 4     statement -> NOM ( )
Rule 5     statement -> OCCUR URL CHAINE
Rule 6     statement -> FONC NOM ( NOM ) : statement
Rule 7     statement -> FONC NOM ( ) : statement
Rule 8     statement -> TANTQUE condition ALORS statement
Rule 9     statement -> SI condition ALORS statement SINON statement
Rule 10    statement -> POUR variable FLECHE expr ALORS statement
Rule 11    statement -> EX
Rule 12    statement -> HELP
Rule 13    statement -> QUIT  [precedence=nonassoc, level=2]
Rule 14    statement -> <empty>
Rule 15    condition -> expr < expr  [precedence=nonassoc, level=1]
Rule 16    condition -> expr > expr  [precedence=nonassoc, level=1]
Rule 17    condition -> expr NE expr  [precedence=nonassoc, level=1]
Rule 18    condition -> expr GE expr  [precedence=nonassoc, level=1]
Rule 19    condition -> expr PE expr  [precedence=nonassoc, level=1]
Rule 20    condition -> expr EGL expr  [precedence=nonassoc, level=1]
Rule 21    variable -> NOM = expr
Rule 22    expr -> ( expr )
Rule 23    expr -> FLOAT
Rule 24    expr -> NUM
Rule 25    expr -> NOM
Rule 26    expr -> CONCA CHAINE CHAINE
Rule 27    expr -> ECRIS expr  [precedence=nonassoc, level=2]
Rule 28    expr -> - expr  [precedence=right, level=6]
Rule 29    expr -> expr % expr  [precedence=left, level=4]
Rule 30    expr -> expr ^ expr  [precedence=right, level=5]
Rule 31    expr -> expr / expr  [precedence=left, level=4]
Rule 32    expr -> expr * expr  [precedence=left, level=4]
Rule 33    expr -> expr x expr  [precedence=left, level=4]
Rule 34    expr -> expr - expr  [precedence=left, level=3]
Rule 35    expr -> expr + expr  [precedence=left, level=3]
Rule 36    expr -> CHAINE
Rule 37    expr -> TYPE expr  [precedence=left, level=3]
Rule 38    expr -> DOUBLE expr  [precedence=nonassoc, level=2]

Terminals, with rules where they appear:

%                    : 29
(                    : 3 4 6 7 22
)                    : 3 4 6 7 22
*                    : 32
+                    : 35
-                    : 28 34
/                    : 31
:                    : 6 7
<                    : 15
=                    : 21
>                    : 16
ALORS                : 8 9 10
CHAINE               : 5 26 26 36
CONCA                : 26
DOUBLE               : 38
ECRIS                : 27
EGL                  : 20
EX                   : 11
FLECHE               : 10
FLOAT                : 23
FONC                 : 6 7
GE                   : 18
HELP                 : 12
NE                   : 17
NOM                  : 3 4 6 6 7 21 25
NUM                  : 24
OCCUR                : 5
PE                   : 19
POUR                 : 10
QUIT                 : 13
SI                   : 9
SINON                : 9
TANTQUE              : 8
TYPE                 : 37
URL                  : 5
^                    : 30
error                : 
x                    : 33

Nonterminals, with rules where they appear:

condition            : 8 9
expr                 : 1 10 15 15 16 16 17 17 18 18 19 19 20 20 21 22 27 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 37 38
statement            : 6 7 8 9 9 10 0
variable             : 2 3 10


state 0

    (0) S' -> . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . EX
    (12) statement -> . HELP
    (13) statement -> . QUIT
    (14) statement -> .
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (21) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    EX              shift and go to state 12
    HELP            shift and go to state 13
    QUIT            shift and go to state 14
    $end            reduce using rule 14 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    statement                      shift and go to state 1
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 1

    (0) S' -> statement .


state 2

    (1) statement -> expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    $end            reduce using rule 1 (statement -> expr .)
    SINON           reduce using rule 1 (statement -> expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 3

    (2) statement -> variable .
    $end            reduce using rule 2 (statement -> variable .)
    SINON           reduce using rule 2 (statement -> variable .)


state 4

    (3) statement -> NOM . ( variable )
    (4) statement -> NOM . ( )
    (25) expr -> NOM .
    (21) variable -> NOM . = expr
    (               shift and go to state 29
    %               reduce using rule 25 (expr -> NOM .)
    ^               reduce using rule 25 (expr -> NOM .)
    /               reduce using rule 25 (expr -> NOM .)
    *               reduce using rule 25 (expr -> NOM .)
    x               reduce using rule 25 (expr -> NOM .)
    -               reduce using rule 25 (expr -> NOM .)
    +               reduce using rule 25 (expr -> NOM .)
    $end            reduce using rule 25 (expr -> NOM .)
    SINON           reduce using rule 25 (expr -> NOM .)
    =               shift and go to state 30


state 5

    (22) expr -> ( . expr )
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 31

state 6

    (5) statement -> OCCUR . URL CHAINE
    URL             shift and go to state 33


state 7

    (36) expr -> CHAINE .
    %               reduce using rule 36 (expr -> CHAINE .)
    ^               reduce using rule 36 (expr -> CHAINE .)
    /               reduce using rule 36 (expr -> CHAINE .)
    *               reduce using rule 36 (expr -> CHAINE .)
    x               reduce using rule 36 (expr -> CHAINE .)
    -               reduce using rule 36 (expr -> CHAINE .)
    +               reduce using rule 36 (expr -> CHAINE .)
    $end            reduce using rule 36 (expr -> CHAINE .)
    )               reduce using rule 36 (expr -> CHAINE .)
    <               reduce using rule 36 (expr -> CHAINE .)
    >               reduce using rule 36 (expr -> CHAINE .)
    NE              reduce using rule 36 (expr -> CHAINE .)
    GE              reduce using rule 36 (expr -> CHAINE .)
    PE              reduce using rule 36 (expr -> CHAINE .)
    EGL             reduce using rule 36 (expr -> CHAINE .)
    FLECHE          reduce using rule 36 (expr -> CHAINE .)
    SINON           reduce using rule 36 (expr -> CHAINE .)
    ALORS           reduce using rule 36 (expr -> CHAINE .)


state 8

    (6) statement -> FONC . NOM ( NOM ) : statement
    (7) statement -> FONC . NOM ( ) : statement
    NOM             shift and go to state 34


state 9

    (8) statement -> TANTQUE . condition ALORS statement
    (15) condition -> . expr < expr
    (16) condition -> . expr > expr
    (17) condition -> . expr NE expr
    (18) condition -> . expr GE expr
    (19) condition -> . expr PE expr
    (20) condition -> . expr EGL expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    condition                      shift and go to state 35
    expr                           shift and go to state 36

state 10

    (9) statement -> SI . condition ALORS statement SINON statement
    (15) condition -> . expr < expr
    (16) condition -> . expr > expr
    (17) condition -> . expr NE expr
    (18) condition -> . expr GE expr
    (19) condition -> . expr PE expr
    (20) condition -> . expr EGL expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    condition                      shift and go to state 37
    expr                           shift and go to state 36

state 11

    (10) statement -> POUR . variable FLECHE expr ALORS statement
    (21) variable -> . NOM = expr
    NOM             shift and go to state 39

    variable                       shift and go to state 38

state 12

    (11) statement -> EX .
    $end            reduce using rule 11 (statement -> EX .)
    SINON           reduce using rule 11 (statement -> EX .)


state 13

    (12) statement -> HELP .
    $end            reduce using rule 12 (statement -> HELP .)
    SINON           reduce using rule 12 (statement -> HELP .)


state 14

    (13) statement -> QUIT .
    $end            reduce using rule 13 (statement -> QUIT .)
    SINON           reduce using rule 13 (statement -> QUIT .)


state 15

    (23) expr -> FLOAT .
    %               reduce using rule 23 (expr -> FLOAT .)
    ^               reduce using rule 23 (expr -> FLOAT .)
    /               reduce using rule 23 (expr -> FLOAT .)
    *               reduce using rule 23 (expr -> FLOAT .)
    x               reduce using rule 23 (expr -> FLOAT .)
    -               reduce using rule 23 (expr -> FLOAT .)
    +               reduce using rule 23 (expr -> FLOAT .)
    $end            reduce using rule 23 (expr -> FLOAT .)
    )               reduce using rule 23 (expr -> FLOAT .)
    <               reduce using rule 23 (expr -> FLOAT .)
    >               reduce using rule 23 (expr -> FLOAT .)
    NE              reduce using rule 23 (expr -> FLOAT .)
    GE              reduce using rule 23 (expr -> FLOAT .)
    PE              reduce using rule 23 (expr -> FLOAT .)
    EGL             reduce using rule 23 (expr -> FLOAT .)
    FLECHE          reduce using rule 23 (expr -> FLOAT .)
    SINON           reduce using rule 23 (expr -> FLOAT .)
    ALORS           reduce using rule 23 (expr -> FLOAT .)


state 16

    (24) expr -> NUM .
    %               reduce using rule 24 (expr -> NUM .)
    ^               reduce using rule 24 (expr -> NUM .)
    /               reduce using rule 24 (expr -> NUM .)
    *               reduce using rule 24 (expr -> NUM .)
    x               reduce using rule 24 (expr -> NUM .)
    -               reduce using rule 24 (expr -> NUM .)
    +               reduce using rule 24 (expr -> NUM .)
    $end            reduce using rule 24 (expr -> NUM .)
    )               reduce using rule 24 (expr -> NUM .)
    <               reduce using rule 24 (expr -> NUM .)
    >               reduce using rule 24 (expr -> NUM .)
    NE              reduce using rule 24 (expr -> NUM .)
    GE              reduce using rule 24 (expr -> NUM .)
    PE              reduce using rule 24 (expr -> NUM .)
    EGL             reduce using rule 24 (expr -> NUM .)
    FLECHE          reduce using rule 24 (expr -> NUM .)
    SINON           reduce using rule 24 (expr -> NUM .)
    ALORS           reduce using rule 24 (expr -> NUM .)


state 17

    (26) expr -> CONCA . CHAINE CHAINE
    CHAINE          shift and go to state 40


state 18

    (27) expr -> ECRIS . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 41

state 19

    (28) expr -> - . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 42

state 20

    (37) expr -> TYPE . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 43

state 21

    (38) expr -> DOUBLE . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 44

state 22

    (29) expr -> expr % . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 45

state 23

    (30) expr -> expr ^ . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 46

state 24

    (31) expr -> expr / . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 47

state 25

    (32) expr -> expr * . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 48

state 26

    (33) expr -> expr x . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 49

state 27

    (34) expr -> expr - . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 50

state 28

    (35) expr -> expr + . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 51

state 29

    (3) statement -> NOM ( . variable )
    (4) statement -> NOM ( . )
    (21) variable -> . NOM = expr
    )               shift and go to state 53
    NOM             shift and go to state 39

    variable                       shift and go to state 52

state 30

    (21) variable -> NOM = . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 54

state 31

    (22) expr -> ( expr . )
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    )               shift and go to state 55
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 32

    (25) expr -> NOM .
    )               reduce using rule 25 (expr -> NOM .)
    %               reduce using rule 25 (expr -> NOM .)
    ^               reduce using rule 25 (expr -> NOM .)
    /               reduce using rule 25 (expr -> NOM .)
    *               reduce using rule 25 (expr -> NOM .)
    x               reduce using rule 25 (expr -> NOM .)
    -               reduce using rule 25 (expr -> NOM .)
    +               reduce using rule 25 (expr -> NOM .)
    <               reduce using rule 25 (expr -> NOM .)
    >               reduce using rule 25 (expr -> NOM .)
    NE              reduce using rule 25 (expr -> NOM .)
    GE              reduce using rule 25 (expr -> NOM .)
    PE              reduce using rule 25 (expr -> NOM .)
    EGL             reduce using rule 25 (expr -> NOM .)
    $end            reduce using rule 25 (expr -> NOM .)
    FLECHE          reduce using rule 25 (expr -> NOM .)
    SINON           reduce using rule 25 (expr -> NOM .)
    ALORS           reduce using rule 25 (expr -> NOM .)


state 33

    (5) statement -> OCCUR URL . CHAINE
    CHAINE          shift and go to state 56


state 34

    (6) statement -> FONC NOM . ( NOM ) : statement
    (7) statement -> FONC NOM . ( ) : statement
    (               shift and go to state 57


state 35

    (8) statement -> TANTQUE condition . ALORS statement
    ALORS           shift and go to state 58


state 36

    (15) condition -> expr . < expr
    (16) condition -> expr . > expr
    (17) condition -> expr . NE expr
    (18) condition -> expr . GE expr
    (19) condition -> expr . PE expr
    (20) condition -> expr . EGL expr
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    <               shift and go to state 59
    >               shift and go to state 60
    NE              shift and go to state 61
    GE              shift and go to state 62
    PE              shift and go to state 63
    EGL             shift and go to state 64
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 37

    (9) statement -> SI condition . ALORS statement SINON statement
    ALORS           shift and go to state 65


state 38

    (10) statement -> POUR variable . FLECHE expr ALORS statement
    FLECHE          shift and go to state 66


state 39

    (21) variable -> NOM . = expr
    =               shift and go to state 30


state 40

    (26) expr -> CONCA CHAINE . CHAINE
    CHAINE          shift and go to state 67


state 41

    (27) expr -> ECRIS expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    $end            reduce using rule 27 (expr -> ECRIS expr .)
    )               reduce using rule 27 (expr -> ECRIS expr .)
    <               reduce using rule 27 (expr -> ECRIS expr .)
    >               reduce using rule 27 (expr -> ECRIS expr .)
    NE              reduce using rule 27 (expr -> ECRIS expr .)
    GE              reduce using rule 27 (expr -> ECRIS expr .)
    PE              reduce using rule 27 (expr -> ECRIS expr .)
    EGL             reduce using rule 27 (expr -> ECRIS expr .)
    FLECHE          reduce using rule 27 (expr -> ECRIS expr .)
    SINON           reduce using rule 27 (expr -> ECRIS expr .)
    ALORS           reduce using rule 27 (expr -> ECRIS expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 42

    (28) expr -> - expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    %               reduce using rule 28 (expr -> - expr .)
    ^               reduce using rule 28 (expr -> - expr .)
    /               reduce using rule 28 (expr -> - expr .)
    *               reduce using rule 28 (expr -> - expr .)
    x               reduce using rule 28 (expr -> - expr .)
    -               reduce using rule 28 (expr -> - expr .)
    +               reduce using rule 28 (expr -> - expr .)
    $end            reduce using rule 28 (expr -> - expr .)
    )               reduce using rule 28 (expr -> - expr .)
    <               reduce using rule 28 (expr -> - expr .)
    >               reduce using rule 28 (expr -> - expr .)
    NE              reduce using rule 28 (expr -> - expr .)
    GE              reduce using rule 28 (expr -> - expr .)
    PE              reduce using rule 28 (expr -> - expr .)
    EGL             reduce using rule 28 (expr -> - expr .)
    FLECHE          reduce using rule 28 (expr -> - expr .)
    SINON           reduce using rule 28 (expr -> - expr .)
    ALORS           reduce using rule 28 (expr -> - expr .)


state 43

    (37) expr -> TYPE expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    -               reduce using rule 37 (expr -> TYPE expr .)
    +               reduce using rule 37 (expr -> TYPE expr .)
    $end            reduce using rule 37 (expr -> TYPE expr .)
    )               reduce using rule 37 (expr -> TYPE expr .)
    <               reduce using rule 37 (expr -> TYPE expr .)
    >               reduce using rule 37 (expr -> TYPE expr .)
    NE              reduce using rule 37 (expr -> TYPE expr .)
    GE              reduce using rule 37 (expr -> TYPE expr .)
    PE              reduce using rule 37 (expr -> TYPE expr .)
    EGL             reduce using rule 37 (expr -> TYPE expr .)
    FLECHE          reduce using rule 37 (expr -> TYPE expr .)
    SINON           reduce using rule 37 (expr -> TYPE expr .)
    ALORS           reduce using rule 37 (expr -> TYPE expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26


state 44

    (38) expr -> DOUBLE expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    $end            reduce using rule 38 (expr -> DOUBLE expr .)
    )               reduce using rule 38 (expr -> DOUBLE expr .)
    <               reduce using rule 38 (expr -> DOUBLE expr .)
    >               reduce using rule 38 (expr -> DOUBLE expr .)
    NE              reduce using rule 38 (expr -> DOUBLE expr .)
    GE              reduce using rule 38 (expr -> DOUBLE expr .)
    PE              reduce using rule 38 (expr -> DOUBLE expr .)
    EGL             reduce using rule 38 (expr -> DOUBLE expr .)
    FLECHE          reduce using rule 38 (expr -> DOUBLE expr .)
    SINON           reduce using rule 38 (expr -> DOUBLE expr .)
    ALORS           reduce using rule 38 (expr -> DOUBLE expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 45

    (29) expr -> expr % expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    %               reduce using rule 29 (expr -> expr % expr .)
    /               reduce using rule 29 (expr -> expr % expr .)
    *               reduce using rule 29 (expr -> expr % expr .)
    x               reduce using rule 29 (expr -> expr % expr .)
    -               reduce using rule 29 (expr -> expr % expr .)
    +               reduce using rule 29 (expr -> expr % expr .)
    $end            reduce using rule 29 (expr -> expr % expr .)
    )               reduce using rule 29 (expr -> expr % expr .)
    <               reduce using rule 29 (expr -> expr % expr .)
    >               reduce using rule 29 (expr -> expr % expr .)
    NE              reduce using rule 29 (expr -> expr % expr .)
    GE              reduce using rule 29 (expr -> expr % expr .)
    PE              reduce using rule 29 (expr -> expr % expr .)
    EGL             reduce using rule 29 (expr -> expr % expr .)
    FLECHE          reduce using rule 29 (expr -> expr % expr .)
    SINON           reduce using rule 29 (expr -> expr % expr .)
    ALORS           reduce using rule 29 (expr -> expr % expr .)
    ^               shift and go to state 23


state 46

    (30) expr -> expr ^ expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    %               reduce using rule 30 (expr -> expr ^ expr .)
    /               reduce using rule 30 (expr -> expr ^ expr .)
    *               reduce using rule 30 (expr -> expr ^ expr .)
    x               reduce using rule 30 (expr -> expr ^ expr .)
    -               reduce using rule 30 (expr -> expr ^ expr .)
    +               reduce using rule 30 (expr -> expr ^ expr .)
    $end            reduce using rule 30 (expr -> expr ^ expr .)
    )               reduce using rule 30 (expr -> expr ^ expr .)
    <               reduce using rule 30 (expr -> expr ^ expr .)
    >               reduce using rule 30 (expr -> expr ^ expr .)
    NE              reduce using rule 30 (expr -> expr ^ expr .)
    GE              reduce using rule 30 (expr -> expr ^ expr .)
    PE              reduce using rule 30 (expr -> expr ^ expr .)
    EGL             reduce using rule 30 (expr -> expr ^ expr .)
    FLECHE          reduce using rule 30 (expr -> expr ^ expr .)
    SINON           reduce using rule 30 (expr -> expr ^ expr .)
    ALORS           reduce using rule 30 (expr -> expr ^ expr .)
    ^               shift and go to state 23


state 47

    (31) expr -> expr / expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    %               reduce using rule 31 (expr -> expr / expr .)
    /               reduce using rule 31 (expr -> expr / expr .)
    *               reduce using rule 31 (expr -> expr / expr .)
    x               reduce using rule 31 (expr -> expr / expr .)
    -               reduce using rule 31 (expr -> expr / expr .)
    +               reduce using rule 31 (expr -> expr / expr .)
    $end            reduce using rule 31 (expr -> expr / expr .)
    )               reduce using rule 31 (expr -> expr / expr .)
    <               reduce using rule 31 (expr -> expr / expr .)
    >               reduce using rule 31 (expr -> expr / expr .)
    NE              reduce using rule 31 (expr -> expr / expr .)
    GE              reduce using rule 31 (expr -> expr / expr .)
    PE              reduce using rule 31 (expr -> expr / expr .)
    EGL             reduce using rule 31 (expr -> expr / expr .)
    FLECHE          reduce using rule 31 (expr -> expr / expr .)
    SINON           reduce using rule 31 (expr -> expr / expr .)
    ALORS           reduce using rule 31 (expr -> expr / expr .)
    ^               shift and go to state 23


state 48

    (32) expr -> expr * expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    %               reduce using rule 32 (expr -> expr * expr .)
    /               reduce using rule 32 (expr -> expr * expr .)
    *               reduce using rule 32 (expr -> expr * expr .)
    x               reduce using rule 32 (expr -> expr * expr .)
    -               reduce using rule 32 (expr -> expr * expr .)
    +               reduce using rule 32 (expr -> expr * expr .)
    $end            reduce using rule 32 (expr -> expr * expr .)
    )               reduce using rule 32 (expr -> expr * expr .)
    <               reduce using rule 32 (expr -> expr * expr .)
    >               reduce using rule 32 (expr -> expr * expr .)
    NE              reduce using rule 32 (expr -> expr * expr .)
    GE              reduce using rule 32 (expr -> expr * expr .)
    PE              reduce using rule 32 (expr -> expr * expr .)
    EGL             reduce using rule 32 (expr -> expr * expr .)
    FLECHE          reduce using rule 32 (expr -> expr * expr .)
    SINON           reduce using rule 32 (expr -> expr * expr .)
    ALORS           reduce using rule 32 (expr -> expr * expr .)
    ^               shift and go to state 23


state 49

    (33) expr -> expr x expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    %               reduce using rule 33 (expr -> expr x expr .)
    /               reduce using rule 33 (expr -> expr x expr .)
    *               reduce using rule 33 (expr -> expr x expr .)
    x               reduce using rule 33 (expr -> expr x expr .)
    -               reduce using rule 33 (expr -> expr x expr .)
    +               reduce using rule 33 (expr -> expr x expr .)
    $end            reduce using rule 33 (expr -> expr x expr .)
    )               reduce using rule 33 (expr -> expr x expr .)
    <               reduce using rule 33 (expr -> expr x expr .)
    >               reduce using rule 33 (expr -> expr x expr .)
    NE              reduce using rule 33 (expr -> expr x expr .)
    GE              reduce using rule 33 (expr -> expr x expr .)
    PE              reduce using rule 33 (expr -> expr x expr .)
    EGL             reduce using rule 33 (expr -> expr x expr .)
    FLECHE          reduce using rule 33 (expr -> expr x expr .)
    SINON           reduce using rule 33 (expr -> expr x expr .)
    ALORS           reduce using rule 33 (expr -> expr x expr .)
    ^               shift and go to state 23


state 50

    (34) expr -> expr - expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    -               reduce using rule 34 (expr -> expr - expr .)
    +               reduce using rule 34 (expr -> expr - expr .)
    $end            reduce using rule 34 (expr -> expr - expr .)
    )               reduce using rule 34 (expr -> expr - expr .)
    <               reduce using rule 34 (expr -> expr - expr .)
    >               reduce using rule 34 (expr -> expr - expr .)
    NE              reduce using rule 34 (expr -> expr - expr .)
    GE              reduce using rule 34 (expr -> expr - expr .)
    PE              reduce using rule 34 (expr -> expr - expr .)
    EGL             reduce using rule 34 (expr -> expr - expr .)
    FLECHE          reduce using rule 34 (expr -> expr - expr .)
    SINON           reduce using rule 34 (expr -> expr - expr .)
    ALORS           reduce using rule 34 (expr -> expr - expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26


state 51

    (35) expr -> expr + expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    -               reduce using rule 35 (expr -> expr + expr .)
    +               reduce using rule 35 (expr -> expr + expr .)
    $end            reduce using rule 35 (expr -> expr + expr .)
    )               reduce using rule 35 (expr -> expr + expr .)
    <               reduce using rule 35 (expr -> expr + expr .)
    >               reduce using rule 35 (expr -> expr + expr .)
    NE              reduce using rule 35 (expr -> expr + expr .)
    GE              reduce using rule 35 (expr -> expr + expr .)
    PE              reduce using rule 35 (expr -> expr + expr .)
    EGL             reduce using rule 35 (expr -> expr + expr .)
    FLECHE          reduce using rule 35 (expr -> expr + expr .)
    SINON           reduce using rule 35 (expr -> expr + expr .)
    ALORS           reduce using rule 35 (expr -> expr + expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26


state 52

    (3) statement -> NOM ( variable . )
    )               shift and go to state 68


state 53

    (4) statement -> NOM ( ) .
    $end            reduce using rule 4 (statement -> NOM ( ) .)
    SINON           reduce using rule 4 (statement -> NOM ( ) .)


state 54

    (21) variable -> NOM = expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    $end            reduce using rule 21 (variable -> NOM = expr .)
    FLECHE          reduce using rule 21 (variable -> NOM = expr .)
    )               reduce using rule 21 (variable -> NOM = expr .)
    SINON           reduce using rule 21 (variable -> NOM = expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 55

    (22) expr -> ( expr ) .
    %               reduce using rule 22 (expr -> ( expr ) .)
    ^               reduce using rule 22 (expr -> ( expr ) .)
    /               reduce using rule 22 (expr -> ( expr ) .)
    *               reduce using rule 22 (expr -> ( expr ) .)
    x               reduce using rule 22 (expr -> ( expr ) .)
    -               reduce using rule 22 (expr -> ( expr ) .)
    +               reduce using rule 22 (expr -> ( expr ) .)
    $end            reduce using rule 22 (expr -> ( expr ) .)
    )               reduce using rule 22 (expr -> ( expr ) .)
    <               reduce using rule 22 (expr -> ( expr ) .)
    >               reduce using rule 22 (expr -> ( expr ) .)
    NE              reduce using rule 22 (expr -> ( expr ) .)
    GE              reduce using rule 22 (expr -> ( expr ) .)
    PE              reduce using rule 22 (expr -> ( expr ) .)
    EGL             reduce using rule 22 (expr -> ( expr ) .)
    FLECHE          reduce using rule 22 (expr -> ( expr ) .)
    SINON           reduce using rule 22 (expr -> ( expr ) .)
    ALORS           reduce using rule 22 (expr -> ( expr ) .)


state 56

    (5) statement -> OCCUR URL CHAINE .
    $end            reduce using rule 5 (statement -> OCCUR URL CHAINE .)
    SINON           reduce using rule 5 (statement -> OCCUR URL CHAINE .)


state 57

    (6) statement -> FONC NOM ( . NOM ) : statement
    (7) statement -> FONC NOM ( . ) : statement
    NOM             shift and go to state 69
    )               shift and go to state 70


state 58

    (8) statement -> TANTQUE condition ALORS . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . EX
    (12) statement -> . HELP
    (13) statement -> . QUIT
    (14) statement -> .
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (21) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    EX              shift and go to state 12
    HELP            shift and go to state 13
    QUIT            shift and go to state 14
    $end            reduce using rule 14 (statement -> .)
    SINON           reduce using rule 14 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    statement                      shift and go to state 71
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 59

    (15) condition -> expr < . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 72

state 60

    (16) condition -> expr > . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 73

state 61

    (17) condition -> expr NE . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 74

state 62

    (18) condition -> expr GE . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 75

state 63

    (19) condition -> expr PE . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 76

state 64

    (20) condition -> expr EGL . expr
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 77

state 65

    (9) statement -> SI condition ALORS . statement SINON statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . EX
    (12) statement -> . HELP
    (13) statement -> . QUIT
    (14) statement -> .
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (21) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    EX              shift and go to state 12
    HELP            shift and go to state 13
    QUIT            shift and go to state 14
    SINON           reduce using rule 14 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    statement                      shift and go to state 78
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 66

    (10) statement -> POUR variable FLECHE . expr ALORS statement
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    NOM             shift and go to state 32
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    expr                           shift and go to state 79

state 67

    (26) expr -> CONCA CHAINE CHAINE .
    %               reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    ^               reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    /               reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    *               reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    x               reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    -               reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    +               reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    $end            reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    )               reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    <               reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    >               reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    NE              reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    GE              reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    PE              reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    EGL             reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    FLECHE          reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    SINON           reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)
    ALORS           reduce using rule 26 (expr -> CONCA CHAINE CHAINE .)


state 68

    (3) statement -> NOM ( variable ) .
    $end            reduce using rule 3 (statement -> NOM ( variable ) .)
    SINON           reduce using rule 3 (statement -> NOM ( variable ) .)


state 69

    (6) statement -> FONC NOM ( NOM . ) : statement
    )               shift and go to state 80


state 70

    (7) statement -> FONC NOM ( ) . : statement
    :               shift and go to state 81


state 71

    (8) statement -> TANTQUE condition ALORS statement .
    $end            reduce using rule 8 (statement -> TANTQUE condition ALORS statement .)
    SINON           reduce using rule 8 (statement -> TANTQUE condition ALORS statement .)


state 72

    (15) condition -> expr < expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    ALORS           reduce using rule 15 (condition -> expr < expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 73

    (16) condition -> expr > expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    ALORS           reduce using rule 16 (condition -> expr > expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 74

    (17) condition -> expr NE expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    ALORS           reduce using rule 17 (condition -> expr NE expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 75

    (18) condition -> expr GE expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    ALORS           reduce using rule 18 (condition -> expr GE expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 76

    (19) condition -> expr PE expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    ALORS           reduce using rule 19 (condition -> expr PE expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 77

    (20) condition -> expr EGL expr .
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    ALORS           reduce using rule 20 (condition -> expr EGL expr .)
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 78

    (9) statement -> SI condition ALORS statement . SINON statement
    SINON           shift and go to state 82


state 79

    (10) statement -> POUR variable FLECHE expr . ALORS statement
    (29) expr -> expr . % expr
    (30) expr -> expr . ^ expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . x expr
    (34) expr -> expr . - expr
    (35) expr -> expr . + expr
    ALORS           shift and go to state 83
    %               shift and go to state 22
    ^               shift and go to state 23
    /               shift and go to state 24
    *               shift and go to state 25
    x               shift and go to state 26
    -               shift and go to state 27
    +               shift and go to state 28


state 80

    (6) statement -> FONC NOM ( NOM ) . : statement
    :               shift and go to state 84


state 81

    (7) statement -> FONC NOM ( ) : . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . EX
    (12) statement -> . HELP
    (13) statement -> . QUIT
    (14) statement -> .
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (21) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    EX              shift and go to state 12
    HELP            shift and go to state 13
    QUIT            shift and go to state 14
    $end            reduce using rule 14 (statement -> .)
    SINON           reduce using rule 14 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    statement                      shift and go to state 85
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 82

    (9) statement -> SI condition ALORS statement SINON . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . EX
    (12) statement -> . HELP
    (13) statement -> . QUIT
    (14) statement -> .
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (21) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    EX              shift and go to state 12
    HELP            shift and go to state 13
    QUIT            shift and go to state 14
    $end            reduce using rule 14 (statement -> .)
    SINON           reduce using rule 14 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    statement                      shift and go to state 86
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 83

    (10) statement -> POUR variable FLECHE expr ALORS . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . EX
    (12) statement -> . HELP
    (13) statement -> . QUIT
    (14) statement -> .
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (21) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    EX              shift and go to state 12
    HELP            shift and go to state 13
    QUIT            shift and go to state 14
    $end            reduce using rule 14 (statement -> .)
    SINON           reduce using rule 14 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    variable                       shift and go to state 3
    expr                           shift and go to state 2
    statement                      shift and go to state 87

state 84

    (6) statement -> FONC NOM ( NOM ) : . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> . EX
    (12) statement -> . HELP
    (13) statement -> . QUIT
    (14) statement -> .
    (22) expr -> . ( expr )
    (23) expr -> . FLOAT
    (24) expr -> . NUM
    (25) expr -> . NOM
    (26) expr -> . CONCA CHAINE CHAINE
    (27) expr -> . ECRIS expr
    (28) expr -> . - expr
    (29) expr -> . expr % expr
    (30) expr -> . expr ^ expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr x expr
    (34) expr -> . expr - expr
    (35) expr -> . expr + expr
    (36) expr -> . CHAINE
    (37) expr -> . TYPE expr
    (38) expr -> . DOUBLE expr
    (21) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    EX              shift and go to state 12
    HELP            shift and go to state 13
    QUIT            shift and go to state 14
    $end            reduce using rule 14 (statement -> .)
    SINON           reduce using rule 14 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 15
    NUM             shift and go to state 16
    CONCA           shift and go to state 17
    ECRIS           shift and go to state 18
    -               shift and go to state 19
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 20
    DOUBLE          shift and go to state 21

    statement                      shift and go to state 88
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 85

    (7) statement -> FONC NOM ( ) : statement .
    $end            reduce using rule 7 (statement -> FONC NOM ( ) : statement .)
    SINON           reduce using rule 7 (statement -> FONC NOM ( ) : statement .)


state 86

    (9) statement -> SI condition ALORS statement SINON statement .
    $end            reduce using rule 9 (statement -> SI condition ALORS statement SINON statement .)
    SINON           reduce using rule 9 (statement -> SI condition ALORS statement SINON statement .)


state 87

    (10) statement -> POUR variable FLECHE expr ALORS statement .
    $end            reduce using rule 10 (statement -> POUR variable FLECHE expr ALORS statement .)
    SINON           reduce using rule 10 (statement -> POUR variable FLECHE expr ALORS statement .)


state 88

    (6) statement -> FONC NOM ( NOM ) : statement .
    $end            reduce using rule 6 (statement -> FONC NOM ( NOM ) : statement .)
    SINON           reduce using rule 6 (statement -> FONC NOM ( NOM ) : statement .)
