Grammar:

Rule 0     S' -> statement
Rule 1     statement -> expr
Rule 2     statement -> variable
Rule 3     statement -> NOM ( variable )
Rule 4     statement -> NOM ( )
Rule 5     statement -> OCCUR URL CHAINE
Rule 6     statement -> FONC NOM ( NOM ) : statement
Rule 7     statement -> FONC NOM ( ) : statement
Rule 8     statement -> TANTQUE condition ALORS statement
Rule 9     statement -> SI condition ALORS statement SINON statement
Rule 10    statement -> POUR variable FLECHE expr ALORS statement
Rule 11    statement -> <empty>
Rule 12    condition -> expr < expr  [precedence=nonassoc, level=1]
Rule 13    condition -> expr > expr  [precedence=nonassoc, level=1]
Rule 14    condition -> expr NE expr  [precedence=nonassoc, level=1]
Rule 15    condition -> expr GE expr  [precedence=nonassoc, level=1]
Rule 16    condition -> expr PE expr  [precedence=nonassoc, level=1]
Rule 17    condition -> expr EGL expr  [precedence=nonassoc, level=1]
Rule 18    variable -> NOM = expr
Rule 19    expr -> ( expr )
Rule 20    expr -> FLOAT
Rule 21    expr -> NUM
Rule 22    expr -> NOM
Rule 23    expr -> CONCA CHAINE CHAINE
Rule 24    expr -> ECRIS expr  [precedence=nonassoc, level=2]
Rule 25    expr -> - expr  [precedence=right, level=6]
Rule 26    expr -> expr % expr  [precedence=left, level=4]
Rule 27    expr -> expr ^ expr  [precedence=right, level=5]
Rule 28    expr -> expr / expr  [precedence=left, level=4]
Rule 29    expr -> expr * expr  [precedence=left, level=4]
Rule 30    expr -> expr x expr  [precedence=left, level=4]
Rule 31    expr -> expr - expr  [precedence=left, level=3]
Rule 32    expr -> expr + expr  [precedence=left, level=3]
Rule 33    expr -> CHAINE
Rule 34    expr -> TYPE expr  [precedence=left, level=3]
Rule 35    expr -> DOUBLE expr  [precedence=nonassoc, level=2]

Terminals, with rules where they appear:

%                    : 26
(                    : 3 4 6 7 19
)                    : 3 4 6 7 19
*                    : 29
+                    : 32
-                    : 25 31
/                    : 28
:                    : 6 7
<                    : 12
=                    : 18
>                    : 13
ALORS                : 8 9 10
CHAINE               : 5 23 23 33
CONCA                : 23
DOUBLE               : 35
ECRIS                : 24
EGL                  : 17
FLECHE               : 10
FLOAT                : 20
FONC                 : 6 7
GE                   : 15
NE                   : 14
NOM                  : 3 4 6 6 7 18 22
NUM                  : 21
OCCUR                : 5
PE                   : 16
POUR                 : 10
SI                   : 9
SINON                : 9
TANTQUE              : 8
TYPE                 : 34
URL                  : 5
^                    : 27
error                : 
x                    : 30

Nonterminals, with rules where they appear:

condition            : 8 9
expr                 : 1 10 12 12 13 13 14 14 15 15 16 16 17 17 18 19 24 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 34 35
statement            : 6 7 8 9 9 10 0
variable             : 2 3 10


state 0

    (0) S' -> . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> .
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (18) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    $end            reduce using rule 11 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    statement                      shift and go to state 1
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 1

    (0) S' -> statement .


state 2

    (1) statement -> expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    $end            reduce using rule 1 (statement -> expr .)
    SINON           reduce using rule 1 (statement -> expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 3

    (2) statement -> variable .
    $end            reduce using rule 2 (statement -> variable .)
    SINON           reduce using rule 2 (statement -> variable .)


state 4

    (3) statement -> NOM . ( variable )
    (4) statement -> NOM . ( )
    (22) expr -> NOM .
    (18) variable -> NOM . = expr
    (               shift and go to state 26
    %               reduce using rule 22 (expr -> NOM .)
    ^               reduce using rule 22 (expr -> NOM .)
    /               reduce using rule 22 (expr -> NOM .)
    *               reduce using rule 22 (expr -> NOM .)
    x               reduce using rule 22 (expr -> NOM .)
    -               reduce using rule 22 (expr -> NOM .)
    +               reduce using rule 22 (expr -> NOM .)
    $end            reduce using rule 22 (expr -> NOM .)
    SINON           reduce using rule 22 (expr -> NOM .)
    =               shift and go to state 27


state 5

    (19) expr -> ( . expr )
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 28

state 6

    (5) statement -> OCCUR . URL CHAINE
    URL             shift and go to state 30


state 7

    (33) expr -> CHAINE .
    %               reduce using rule 33 (expr -> CHAINE .)
    ^               reduce using rule 33 (expr -> CHAINE .)
    /               reduce using rule 33 (expr -> CHAINE .)
    *               reduce using rule 33 (expr -> CHAINE .)
    x               reduce using rule 33 (expr -> CHAINE .)
    -               reduce using rule 33 (expr -> CHAINE .)
    +               reduce using rule 33 (expr -> CHAINE .)
    $end            reduce using rule 33 (expr -> CHAINE .)
    )               reduce using rule 33 (expr -> CHAINE .)
    <               reduce using rule 33 (expr -> CHAINE .)
    >               reduce using rule 33 (expr -> CHAINE .)
    NE              reduce using rule 33 (expr -> CHAINE .)
    GE              reduce using rule 33 (expr -> CHAINE .)
    PE              reduce using rule 33 (expr -> CHAINE .)
    EGL             reduce using rule 33 (expr -> CHAINE .)
    FLECHE          reduce using rule 33 (expr -> CHAINE .)
    SINON           reduce using rule 33 (expr -> CHAINE .)
    ALORS           reduce using rule 33 (expr -> CHAINE .)


state 8

    (6) statement -> FONC . NOM ( NOM ) : statement
    (7) statement -> FONC . NOM ( ) : statement
    NOM             shift and go to state 31


state 9

    (8) statement -> TANTQUE . condition ALORS statement
    (12) condition -> . expr < expr
    (13) condition -> . expr > expr
    (14) condition -> . expr NE expr
    (15) condition -> . expr GE expr
    (16) condition -> . expr PE expr
    (17) condition -> . expr EGL expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    condition                      shift and go to state 32
    expr                           shift and go to state 33

state 10

    (9) statement -> SI . condition ALORS statement SINON statement
    (12) condition -> . expr < expr
    (13) condition -> . expr > expr
    (14) condition -> . expr NE expr
    (15) condition -> . expr GE expr
    (16) condition -> . expr PE expr
    (17) condition -> . expr EGL expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    condition                      shift and go to state 34
    expr                           shift and go to state 33

state 11

    (10) statement -> POUR . variable FLECHE expr ALORS statement
    (18) variable -> . NOM = expr
    NOM             shift and go to state 36

    variable                       shift and go to state 35

state 12

    (20) expr -> FLOAT .
    %               reduce using rule 20 (expr -> FLOAT .)
    ^               reduce using rule 20 (expr -> FLOAT .)
    /               reduce using rule 20 (expr -> FLOAT .)
    *               reduce using rule 20 (expr -> FLOAT .)
    x               reduce using rule 20 (expr -> FLOAT .)
    -               reduce using rule 20 (expr -> FLOAT .)
    +               reduce using rule 20 (expr -> FLOAT .)
    $end            reduce using rule 20 (expr -> FLOAT .)
    )               reduce using rule 20 (expr -> FLOAT .)
    <               reduce using rule 20 (expr -> FLOAT .)
    >               reduce using rule 20 (expr -> FLOAT .)
    NE              reduce using rule 20 (expr -> FLOAT .)
    GE              reduce using rule 20 (expr -> FLOAT .)
    PE              reduce using rule 20 (expr -> FLOAT .)
    EGL             reduce using rule 20 (expr -> FLOAT .)
    FLECHE          reduce using rule 20 (expr -> FLOAT .)
    SINON           reduce using rule 20 (expr -> FLOAT .)
    ALORS           reduce using rule 20 (expr -> FLOAT .)


state 13

    (21) expr -> NUM .
    %               reduce using rule 21 (expr -> NUM .)
    ^               reduce using rule 21 (expr -> NUM .)
    /               reduce using rule 21 (expr -> NUM .)
    *               reduce using rule 21 (expr -> NUM .)
    x               reduce using rule 21 (expr -> NUM .)
    -               reduce using rule 21 (expr -> NUM .)
    +               reduce using rule 21 (expr -> NUM .)
    $end            reduce using rule 21 (expr -> NUM .)
    )               reduce using rule 21 (expr -> NUM .)
    <               reduce using rule 21 (expr -> NUM .)
    >               reduce using rule 21 (expr -> NUM .)
    NE              reduce using rule 21 (expr -> NUM .)
    GE              reduce using rule 21 (expr -> NUM .)
    PE              reduce using rule 21 (expr -> NUM .)
    EGL             reduce using rule 21 (expr -> NUM .)
    FLECHE          reduce using rule 21 (expr -> NUM .)
    SINON           reduce using rule 21 (expr -> NUM .)
    ALORS           reduce using rule 21 (expr -> NUM .)


state 14

    (23) expr -> CONCA . CHAINE CHAINE
    CHAINE          shift and go to state 37


state 15

    (24) expr -> ECRIS . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 38

state 16

    (25) expr -> - . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 39

state 17

    (34) expr -> TYPE . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 40

state 18

    (35) expr -> DOUBLE . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 41

state 19

    (26) expr -> expr % . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 42

state 20

    (27) expr -> expr ^ . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 43

state 21

    (28) expr -> expr / . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 44

state 22

    (29) expr -> expr * . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 45

state 23

    (30) expr -> expr x . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 46

state 24

    (31) expr -> expr - . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 47

state 25

    (32) expr -> expr + . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 48

state 26

    (3) statement -> NOM ( . variable )
    (4) statement -> NOM ( . )
    (18) variable -> . NOM = expr
    )               shift and go to state 50
    NOM             shift and go to state 36

    variable                       shift and go to state 49

state 27

    (18) variable -> NOM = . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 51

state 28

    (19) expr -> ( expr . )
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    )               shift and go to state 52
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 29

    (22) expr -> NOM .
    )               reduce using rule 22 (expr -> NOM .)
    %               reduce using rule 22 (expr -> NOM .)
    ^               reduce using rule 22 (expr -> NOM .)
    /               reduce using rule 22 (expr -> NOM .)
    *               reduce using rule 22 (expr -> NOM .)
    x               reduce using rule 22 (expr -> NOM .)
    -               reduce using rule 22 (expr -> NOM .)
    +               reduce using rule 22 (expr -> NOM .)
    <               reduce using rule 22 (expr -> NOM .)
    >               reduce using rule 22 (expr -> NOM .)
    NE              reduce using rule 22 (expr -> NOM .)
    GE              reduce using rule 22 (expr -> NOM .)
    PE              reduce using rule 22 (expr -> NOM .)
    EGL             reduce using rule 22 (expr -> NOM .)
    $end            reduce using rule 22 (expr -> NOM .)
    FLECHE          reduce using rule 22 (expr -> NOM .)
    SINON           reduce using rule 22 (expr -> NOM .)
    ALORS           reduce using rule 22 (expr -> NOM .)


state 30

    (5) statement -> OCCUR URL . CHAINE
    CHAINE          shift and go to state 53


state 31

    (6) statement -> FONC NOM . ( NOM ) : statement
    (7) statement -> FONC NOM . ( ) : statement
    (               shift and go to state 54


state 32

    (8) statement -> TANTQUE condition . ALORS statement
    ALORS           shift and go to state 55


state 33

    (12) condition -> expr . < expr
    (13) condition -> expr . > expr
    (14) condition -> expr . NE expr
    (15) condition -> expr . GE expr
    (16) condition -> expr . PE expr
    (17) condition -> expr . EGL expr
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    <               shift and go to state 56
    >               shift and go to state 57
    NE              shift and go to state 58
    GE              shift and go to state 59
    PE              shift and go to state 60
    EGL             shift and go to state 61
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 34

    (9) statement -> SI condition . ALORS statement SINON statement
    ALORS           shift and go to state 62


state 35

    (10) statement -> POUR variable . FLECHE expr ALORS statement
    FLECHE          shift and go to state 63


state 36

    (18) variable -> NOM . = expr
    =               shift and go to state 27


state 37

    (23) expr -> CONCA CHAINE . CHAINE
    CHAINE          shift and go to state 64


state 38

    (24) expr -> ECRIS expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    $end            reduce using rule 24 (expr -> ECRIS expr .)
    )               reduce using rule 24 (expr -> ECRIS expr .)
    <               reduce using rule 24 (expr -> ECRIS expr .)
    >               reduce using rule 24 (expr -> ECRIS expr .)
    NE              reduce using rule 24 (expr -> ECRIS expr .)
    GE              reduce using rule 24 (expr -> ECRIS expr .)
    PE              reduce using rule 24 (expr -> ECRIS expr .)
    EGL             reduce using rule 24 (expr -> ECRIS expr .)
    FLECHE          reduce using rule 24 (expr -> ECRIS expr .)
    SINON           reduce using rule 24 (expr -> ECRIS expr .)
    ALORS           reduce using rule 24 (expr -> ECRIS expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 39

    (25) expr -> - expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    %               reduce using rule 25 (expr -> - expr .)
    ^               reduce using rule 25 (expr -> - expr .)
    /               reduce using rule 25 (expr -> - expr .)
    *               reduce using rule 25 (expr -> - expr .)
    x               reduce using rule 25 (expr -> - expr .)
    -               reduce using rule 25 (expr -> - expr .)
    +               reduce using rule 25 (expr -> - expr .)
    $end            reduce using rule 25 (expr -> - expr .)
    )               reduce using rule 25 (expr -> - expr .)
    <               reduce using rule 25 (expr -> - expr .)
    >               reduce using rule 25 (expr -> - expr .)
    NE              reduce using rule 25 (expr -> - expr .)
    GE              reduce using rule 25 (expr -> - expr .)
    PE              reduce using rule 25 (expr -> - expr .)
    EGL             reduce using rule 25 (expr -> - expr .)
    FLECHE          reduce using rule 25 (expr -> - expr .)
    SINON           reduce using rule 25 (expr -> - expr .)
    ALORS           reduce using rule 25 (expr -> - expr .)


state 40

    (34) expr -> TYPE expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    -               reduce using rule 34 (expr -> TYPE expr .)
    +               reduce using rule 34 (expr -> TYPE expr .)
    $end            reduce using rule 34 (expr -> TYPE expr .)
    )               reduce using rule 34 (expr -> TYPE expr .)
    <               reduce using rule 34 (expr -> TYPE expr .)
    >               reduce using rule 34 (expr -> TYPE expr .)
    NE              reduce using rule 34 (expr -> TYPE expr .)
    GE              reduce using rule 34 (expr -> TYPE expr .)
    PE              reduce using rule 34 (expr -> TYPE expr .)
    EGL             reduce using rule 34 (expr -> TYPE expr .)
    FLECHE          reduce using rule 34 (expr -> TYPE expr .)
    SINON           reduce using rule 34 (expr -> TYPE expr .)
    ALORS           reduce using rule 34 (expr -> TYPE expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23


state 41

    (35) expr -> DOUBLE expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    $end            reduce using rule 35 (expr -> DOUBLE expr .)
    )               reduce using rule 35 (expr -> DOUBLE expr .)
    <               reduce using rule 35 (expr -> DOUBLE expr .)
    >               reduce using rule 35 (expr -> DOUBLE expr .)
    NE              reduce using rule 35 (expr -> DOUBLE expr .)
    GE              reduce using rule 35 (expr -> DOUBLE expr .)
    PE              reduce using rule 35 (expr -> DOUBLE expr .)
    EGL             reduce using rule 35 (expr -> DOUBLE expr .)
    FLECHE          reduce using rule 35 (expr -> DOUBLE expr .)
    SINON           reduce using rule 35 (expr -> DOUBLE expr .)
    ALORS           reduce using rule 35 (expr -> DOUBLE expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 42

    (26) expr -> expr % expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    %               reduce using rule 26 (expr -> expr % expr .)
    /               reduce using rule 26 (expr -> expr % expr .)
    *               reduce using rule 26 (expr -> expr % expr .)
    x               reduce using rule 26 (expr -> expr % expr .)
    -               reduce using rule 26 (expr -> expr % expr .)
    +               reduce using rule 26 (expr -> expr % expr .)
    $end            reduce using rule 26 (expr -> expr % expr .)
    )               reduce using rule 26 (expr -> expr % expr .)
    <               reduce using rule 26 (expr -> expr % expr .)
    >               reduce using rule 26 (expr -> expr % expr .)
    NE              reduce using rule 26 (expr -> expr % expr .)
    GE              reduce using rule 26 (expr -> expr % expr .)
    PE              reduce using rule 26 (expr -> expr % expr .)
    EGL             reduce using rule 26 (expr -> expr % expr .)
    FLECHE          reduce using rule 26 (expr -> expr % expr .)
    SINON           reduce using rule 26 (expr -> expr % expr .)
    ALORS           reduce using rule 26 (expr -> expr % expr .)
    ^               shift and go to state 20


state 43

    (27) expr -> expr ^ expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    %               reduce using rule 27 (expr -> expr ^ expr .)
    /               reduce using rule 27 (expr -> expr ^ expr .)
    *               reduce using rule 27 (expr -> expr ^ expr .)
    x               reduce using rule 27 (expr -> expr ^ expr .)
    -               reduce using rule 27 (expr -> expr ^ expr .)
    +               reduce using rule 27 (expr -> expr ^ expr .)
    $end            reduce using rule 27 (expr -> expr ^ expr .)
    )               reduce using rule 27 (expr -> expr ^ expr .)
    <               reduce using rule 27 (expr -> expr ^ expr .)
    >               reduce using rule 27 (expr -> expr ^ expr .)
    NE              reduce using rule 27 (expr -> expr ^ expr .)
    GE              reduce using rule 27 (expr -> expr ^ expr .)
    PE              reduce using rule 27 (expr -> expr ^ expr .)
    EGL             reduce using rule 27 (expr -> expr ^ expr .)
    FLECHE          reduce using rule 27 (expr -> expr ^ expr .)
    SINON           reduce using rule 27 (expr -> expr ^ expr .)
    ALORS           reduce using rule 27 (expr -> expr ^ expr .)
    ^               shift and go to state 20


state 44

    (28) expr -> expr / expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    %               reduce using rule 28 (expr -> expr / expr .)
    /               reduce using rule 28 (expr -> expr / expr .)
    *               reduce using rule 28 (expr -> expr / expr .)
    x               reduce using rule 28 (expr -> expr / expr .)
    -               reduce using rule 28 (expr -> expr / expr .)
    +               reduce using rule 28 (expr -> expr / expr .)
    $end            reduce using rule 28 (expr -> expr / expr .)
    )               reduce using rule 28 (expr -> expr / expr .)
    <               reduce using rule 28 (expr -> expr / expr .)
    >               reduce using rule 28 (expr -> expr / expr .)
    NE              reduce using rule 28 (expr -> expr / expr .)
    GE              reduce using rule 28 (expr -> expr / expr .)
    PE              reduce using rule 28 (expr -> expr / expr .)
    EGL             reduce using rule 28 (expr -> expr / expr .)
    FLECHE          reduce using rule 28 (expr -> expr / expr .)
    SINON           reduce using rule 28 (expr -> expr / expr .)
    ALORS           reduce using rule 28 (expr -> expr / expr .)
    ^               shift and go to state 20


state 45

    (29) expr -> expr * expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    %               reduce using rule 29 (expr -> expr * expr .)
    /               reduce using rule 29 (expr -> expr * expr .)
    *               reduce using rule 29 (expr -> expr * expr .)
    x               reduce using rule 29 (expr -> expr * expr .)
    -               reduce using rule 29 (expr -> expr * expr .)
    +               reduce using rule 29 (expr -> expr * expr .)
    $end            reduce using rule 29 (expr -> expr * expr .)
    )               reduce using rule 29 (expr -> expr * expr .)
    <               reduce using rule 29 (expr -> expr * expr .)
    >               reduce using rule 29 (expr -> expr * expr .)
    NE              reduce using rule 29 (expr -> expr * expr .)
    GE              reduce using rule 29 (expr -> expr * expr .)
    PE              reduce using rule 29 (expr -> expr * expr .)
    EGL             reduce using rule 29 (expr -> expr * expr .)
    FLECHE          reduce using rule 29 (expr -> expr * expr .)
    SINON           reduce using rule 29 (expr -> expr * expr .)
    ALORS           reduce using rule 29 (expr -> expr * expr .)
    ^               shift and go to state 20


state 46

    (30) expr -> expr x expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    %               reduce using rule 30 (expr -> expr x expr .)
    /               reduce using rule 30 (expr -> expr x expr .)
    *               reduce using rule 30 (expr -> expr x expr .)
    x               reduce using rule 30 (expr -> expr x expr .)
    -               reduce using rule 30 (expr -> expr x expr .)
    +               reduce using rule 30 (expr -> expr x expr .)
    $end            reduce using rule 30 (expr -> expr x expr .)
    )               reduce using rule 30 (expr -> expr x expr .)
    <               reduce using rule 30 (expr -> expr x expr .)
    >               reduce using rule 30 (expr -> expr x expr .)
    NE              reduce using rule 30 (expr -> expr x expr .)
    GE              reduce using rule 30 (expr -> expr x expr .)
    PE              reduce using rule 30 (expr -> expr x expr .)
    EGL             reduce using rule 30 (expr -> expr x expr .)
    FLECHE          reduce using rule 30 (expr -> expr x expr .)
    SINON           reduce using rule 30 (expr -> expr x expr .)
    ALORS           reduce using rule 30 (expr -> expr x expr .)
    ^               shift and go to state 20


state 47

    (31) expr -> expr - expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    -               reduce using rule 31 (expr -> expr - expr .)
    +               reduce using rule 31 (expr -> expr - expr .)
    $end            reduce using rule 31 (expr -> expr - expr .)
    )               reduce using rule 31 (expr -> expr - expr .)
    <               reduce using rule 31 (expr -> expr - expr .)
    >               reduce using rule 31 (expr -> expr - expr .)
    NE              reduce using rule 31 (expr -> expr - expr .)
    GE              reduce using rule 31 (expr -> expr - expr .)
    PE              reduce using rule 31 (expr -> expr - expr .)
    EGL             reduce using rule 31 (expr -> expr - expr .)
    FLECHE          reduce using rule 31 (expr -> expr - expr .)
    SINON           reduce using rule 31 (expr -> expr - expr .)
    ALORS           reduce using rule 31 (expr -> expr - expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23


state 48

    (32) expr -> expr + expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    -               reduce using rule 32 (expr -> expr + expr .)
    +               reduce using rule 32 (expr -> expr + expr .)
    $end            reduce using rule 32 (expr -> expr + expr .)
    )               reduce using rule 32 (expr -> expr + expr .)
    <               reduce using rule 32 (expr -> expr + expr .)
    >               reduce using rule 32 (expr -> expr + expr .)
    NE              reduce using rule 32 (expr -> expr + expr .)
    GE              reduce using rule 32 (expr -> expr + expr .)
    PE              reduce using rule 32 (expr -> expr + expr .)
    EGL             reduce using rule 32 (expr -> expr + expr .)
    FLECHE          reduce using rule 32 (expr -> expr + expr .)
    SINON           reduce using rule 32 (expr -> expr + expr .)
    ALORS           reduce using rule 32 (expr -> expr + expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23


state 49

    (3) statement -> NOM ( variable . )
    )               shift and go to state 65


state 50

    (4) statement -> NOM ( ) .
    $end            reduce using rule 4 (statement -> NOM ( ) .)
    SINON           reduce using rule 4 (statement -> NOM ( ) .)


state 51

    (18) variable -> NOM = expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    $end            reduce using rule 18 (variable -> NOM = expr .)
    FLECHE          reduce using rule 18 (variable -> NOM = expr .)
    )               reduce using rule 18 (variable -> NOM = expr .)
    SINON           reduce using rule 18 (variable -> NOM = expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 52

    (19) expr -> ( expr ) .
    %               reduce using rule 19 (expr -> ( expr ) .)
    ^               reduce using rule 19 (expr -> ( expr ) .)
    /               reduce using rule 19 (expr -> ( expr ) .)
    *               reduce using rule 19 (expr -> ( expr ) .)
    x               reduce using rule 19 (expr -> ( expr ) .)
    -               reduce using rule 19 (expr -> ( expr ) .)
    +               reduce using rule 19 (expr -> ( expr ) .)
    $end            reduce using rule 19 (expr -> ( expr ) .)
    )               reduce using rule 19 (expr -> ( expr ) .)
    <               reduce using rule 19 (expr -> ( expr ) .)
    >               reduce using rule 19 (expr -> ( expr ) .)
    NE              reduce using rule 19 (expr -> ( expr ) .)
    GE              reduce using rule 19 (expr -> ( expr ) .)
    PE              reduce using rule 19 (expr -> ( expr ) .)
    EGL             reduce using rule 19 (expr -> ( expr ) .)
    FLECHE          reduce using rule 19 (expr -> ( expr ) .)
    SINON           reduce using rule 19 (expr -> ( expr ) .)
    ALORS           reduce using rule 19 (expr -> ( expr ) .)


state 53

    (5) statement -> OCCUR URL CHAINE .
    $end            reduce using rule 5 (statement -> OCCUR URL CHAINE .)
    SINON           reduce using rule 5 (statement -> OCCUR URL CHAINE .)


state 54

    (6) statement -> FONC NOM ( . NOM ) : statement
    (7) statement -> FONC NOM ( . ) : statement
    NOM             shift and go to state 66
    )               shift and go to state 67


state 55

    (8) statement -> TANTQUE condition ALORS . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> .
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (18) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    $end            reduce using rule 11 (statement -> .)
    SINON           reduce using rule 11 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    statement                      shift and go to state 68
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 56

    (12) condition -> expr < . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 69

state 57

    (13) condition -> expr > . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 70

state 58

    (14) condition -> expr NE . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 71

state 59

    (15) condition -> expr GE . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 72

state 60

    (16) condition -> expr PE . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 73

state 61

    (17) condition -> expr EGL . expr
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 74

state 62

    (9) statement -> SI condition ALORS . statement SINON statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> .
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (18) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    SINON           reduce using rule 11 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    statement                      shift and go to state 75
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 63

    (10) statement -> POUR variable FLECHE . expr ALORS statement
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    NOM             shift and go to state 29
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    expr                           shift and go to state 76

state 64

    (23) expr -> CONCA CHAINE CHAINE .
    %               reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    ^               reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    /               reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    *               reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    x               reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    -               reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    +               reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    $end            reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    )               reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    <               reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    >               reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    NE              reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    GE              reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    PE              reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    EGL             reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    FLECHE          reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    SINON           reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)
    ALORS           reduce using rule 23 (expr -> CONCA CHAINE CHAINE .)


state 65

    (3) statement -> NOM ( variable ) .
    $end            reduce using rule 3 (statement -> NOM ( variable ) .)
    SINON           reduce using rule 3 (statement -> NOM ( variable ) .)


state 66

    (6) statement -> FONC NOM ( NOM . ) : statement
    )               shift and go to state 77


state 67

    (7) statement -> FONC NOM ( ) . : statement
    :               shift and go to state 78


state 68

    (8) statement -> TANTQUE condition ALORS statement .
    $end            reduce using rule 8 (statement -> TANTQUE condition ALORS statement .)
    SINON           reduce using rule 8 (statement -> TANTQUE condition ALORS statement .)


state 69

    (12) condition -> expr < expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    ALORS           reduce using rule 12 (condition -> expr < expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 70

    (13) condition -> expr > expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    ALORS           reduce using rule 13 (condition -> expr > expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 71

    (14) condition -> expr NE expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    ALORS           reduce using rule 14 (condition -> expr NE expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 72

    (15) condition -> expr GE expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    ALORS           reduce using rule 15 (condition -> expr GE expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 73

    (16) condition -> expr PE expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    ALORS           reduce using rule 16 (condition -> expr PE expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 74

    (17) condition -> expr EGL expr .
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    ALORS           reduce using rule 17 (condition -> expr EGL expr .)
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 75

    (9) statement -> SI condition ALORS statement . SINON statement
    SINON           shift and go to state 79


state 76

    (10) statement -> POUR variable FLECHE expr . ALORS statement
    (26) expr -> expr . % expr
    (27) expr -> expr . ^ expr
    (28) expr -> expr . / expr
    (29) expr -> expr . * expr
    (30) expr -> expr . x expr
    (31) expr -> expr . - expr
    (32) expr -> expr . + expr
    ALORS           shift and go to state 80
    %               shift and go to state 19
    ^               shift and go to state 20
    /               shift and go to state 21
    *               shift and go to state 22
    x               shift and go to state 23
    -               shift and go to state 24
    +               shift and go to state 25


state 77

    (6) statement -> FONC NOM ( NOM ) . : statement
    :               shift and go to state 81


state 78

    (7) statement -> FONC NOM ( ) : . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> .
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (18) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    $end            reduce using rule 11 (statement -> .)
    SINON           reduce using rule 11 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    statement                      shift and go to state 82
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 79

    (9) statement -> SI condition ALORS statement SINON . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> .
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (18) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    $end            reduce using rule 11 (statement -> .)
    SINON           reduce using rule 11 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    statement                      shift and go to state 83
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 80

    (10) statement -> POUR variable FLECHE expr ALORS . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> .
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (18) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    $end            reduce using rule 11 (statement -> .)
    SINON           reduce using rule 11 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    variable                       shift and go to state 3
    expr                           shift and go to state 2
    statement                      shift and go to state 84

state 81

    (6) statement -> FONC NOM ( NOM ) : . statement
    (1) statement -> . expr
    (2) statement -> . variable
    (3) statement -> . NOM ( variable )
    (4) statement -> . NOM ( )
    (5) statement -> . OCCUR URL CHAINE
    (6) statement -> . FONC NOM ( NOM ) : statement
    (7) statement -> . FONC NOM ( ) : statement
    (8) statement -> . TANTQUE condition ALORS statement
    (9) statement -> . SI condition ALORS statement SINON statement
    (10) statement -> . POUR variable FLECHE expr ALORS statement
    (11) statement -> .
    (19) expr -> . ( expr )
    (20) expr -> . FLOAT
    (21) expr -> . NUM
    (22) expr -> . NOM
    (23) expr -> . CONCA CHAINE CHAINE
    (24) expr -> . ECRIS expr
    (25) expr -> . - expr
    (26) expr -> . expr % expr
    (27) expr -> . expr ^ expr
    (28) expr -> . expr / expr
    (29) expr -> . expr * expr
    (30) expr -> . expr x expr
    (31) expr -> . expr - expr
    (32) expr -> . expr + expr
    (33) expr -> . CHAINE
    (34) expr -> . TYPE expr
    (35) expr -> . DOUBLE expr
    (18) variable -> . NOM = expr
    NOM             shift and go to state 4
    OCCUR           shift and go to state 6
    FONC            shift and go to state 8
    TANTQUE         shift and go to state 9
    SI              shift and go to state 10
    POUR            shift and go to state 11
    $end            reduce using rule 11 (statement -> .)
    SINON           reduce using rule 11 (statement -> .)
    (               shift and go to state 5
    FLOAT           shift and go to state 12
    NUM             shift and go to state 13
    CONCA           shift and go to state 14
    ECRIS           shift and go to state 15
    -               shift and go to state 16
    CHAINE          shift and go to state 7
    TYPE            shift and go to state 17
    DOUBLE          shift and go to state 18

    statement                      shift and go to state 85
    expr                           shift and go to state 2
    variable                       shift and go to state 3

state 82

    (7) statement -> FONC NOM ( ) : statement .
    $end            reduce using rule 7 (statement -> FONC NOM ( ) : statement .)
    SINON           reduce using rule 7 (statement -> FONC NOM ( ) : statement .)


state 83

    (9) statement -> SI condition ALORS statement SINON statement .
    $end            reduce using rule 9 (statement -> SI condition ALORS statement SINON statement .)
    SINON           reduce using rule 9 (statement -> SI condition ALORS statement SINON statement .)


state 84

    (10) statement -> POUR variable FLECHE expr ALORS statement .
    $end            reduce using rule 10 (statement -> POUR variable FLECHE expr ALORS statement .)
    SINON           reduce using rule 10 (statement -> POUR variable FLECHE expr ALORS statement .)


state 85

    (6) statement -> FONC NOM ( NOM ) : statement .
    $end            reduce using rule 6 (statement -> FONC NOM ( NOM ) : statement .)
    SINON           reduce using rule 6 (statement -> FONC NOM ( NOM ) : statement .)
